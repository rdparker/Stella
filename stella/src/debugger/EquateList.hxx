//============================================================================
//
//   SSSS    tt          lll  lll       
//  SS  SS   tt           ll   ll        
//  SS     tttttt  eeee   ll   ll   aaaa 
//   SSSS    tt   ee  ee  ll   ll      aa
//      SS   tt   eeeeee  ll   ll   aaaaa  --  "An Atari 2600 VCS Emulator"
//  SS  SS   tt   ee      ll   ll  aa  aa
//   SSSS     ttt  eeeee llll llll  aaaaa
//
// Copyright (c) 1995-2008 by Bradford W. Mott and the Stella team
//
// See the file "license" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.
//
// $Id: EquateList.hxx,v 1.19 2008-05-01 23:08:24 stephena Exp $
//============================================================================

#ifndef EQUATELIST_HXX
#define EQUATELIST_HXX

#include <map>

#include "bspf.hxx"
#include "Equate.hxx"

class EquateList
{
  public:
    EquateList();
    ~EquateList();

    /**
      Add an equate consisting of the given label and address
    */
    void addEquate(const string& label, int address, const int flags);

    /**
      Remove the equate with the given label
    */
    bool removeEquate(const string& label);

    /**
      Accessor methods for labels and addresses
    */
    const string& getLabel(int addr, const int flags = EQF_ANY);
    string getFormatted(int addr, int places, const int flags = EQF_ANY);
    int getAddress(const string& label, const int flags = EQF_ANY);

    /**
      Load user equates from the given symbol file (generated by DASM)
    */
    string loadFile(const string& file);

    /**
      Save user equates into a symbol file similar to that generated by DASM
    */
    bool saveFile(const string& file);

    /**
      Methods used by the command parser for tab-completion
    */
    int countCompletions(const char *in);
    const string& getCompletions() { return myCompletions; }
    const string& getCompletionPrefix() { return myCompPrefix; }

  private:
    // Extract labels and values from the given character stream
    string extractLabel(char *c);
    int extractValue(char *c);

  private:
    typedef map<int, Equate> AddrToLabel;
    typedef map<string, Equate> LabelToAddr;

    string myCompletions;
    string myCompPrefix;

    LabelToAddr myFwdMap;
    AddrToLabel myRevMap;
};

#endif
