#!/usr/local/bin/perl -w
use strict;

use Tk;
use Tk::Font;
use Rsynth::Elements;
use Audio::Play;
use blib './Rsynth';
use Rsynth::Audio;

my $au = Audio::Data->new(rate => 11025);
my $synth = Rsynth::Audio->new($au);

my $mw = MainWindow->new;
$mw->menu;

my $IPA = $mw->Font(family => 'Gentium',
                    point => 180, slant => 'r',
                    weight => 'medium');

my $t = $mw->Scrolled(Text => -width => 25,-background => 'black')
         ->pack(-side => 'right', -expand => 1, -fill => 'both');

#
# Vowel diagram to screen:
#  Y axis is F1 - higher values near bottom, so just scaled

sub F1BASE  () {  190 }  # Lowest F1 and origin for Y axis
sub F1MAX   () {  900 }  # Highest F1
sub F1SCALE () {    3 }

# X axis is F2-F1  with higher values on the left
#
sub F2MIN   () {  700 }  # Lowest F2
sub F2MAX   () { 2500 }  # Highest F2
sub F2BASE  () { 2400 }  # Screen X offset to ensure +ve x.
sub F2SCALE () {    6 }

# F3 is a 3rd dimension which is a pain.
#  F3 is lowest for /r/ sounds - low F3 is their characteristic.
#  F3 is highest for unrounded vowels and lower for rounded vowels
#     (F2 is lower for rounded vowels too)
#  Note that /i/ and /j/ and possibly /&/ F3 isn't
#  from usual "cavity".

sub F3MIN   () { 1600 }
sub F3MAX   () { 3200 }
sub F3SCALE () {    6 }

sub MINSPACE () { 200 }

sub f1f2toscreen
{
 my ($f1,$f2) = @_;
 my $x = (F2BASE - $f2 + $f1)/F2SCALE;
 my $y = ($f1 - F1BASE)/F1SCALE;
 return ($x,$y);
}

sub f1f2fromscreen
{
 my ($x,$y) = @_;
 my $f1 = F1BASE + F1SCALE*$y;
 my $f2 = F2BASE - F2SCALE*$x+$f1;
 if ($f2 < $f1 + MINSPACE)
  {
   $f2 = $f1 + MINSPACE;
  }

 return ($f1,$f2);
}

sub f2f3toscreen
{
 my ($f2,$f3) = @_;
 my $x = (F2BASE - $f2)/F2SCALE;
 my $y = ($f3 - F3MIN)/F3SCALE;
 return ($x,$y);
}

sub f2f3fromscreen
{
 my ($x,$y) = @_;
 my $f2 = F2BASE - $x *F2SCALE;
 my $f3  = F3MIN + $y *F3SCALE;
 if ($f3 < $f2 + MINSPACE)
  {
   $f3 = $f2 + MINSPACE;
  }
 return ($f2,$f3);
}




my ($width,$height) = f1f2toscreen(F1MAX, F2MIN);

my $left = $mw->Frame->pack(-side => 'left', -fill => 'y', -expand => 0);

my $f1f2  = $left->Canvas(-background => 'black',
                     -height => $height,
                     -width  => $width)
          ->pack(-side => 'top', -expand => 0);

($width,$height) = f2f3toscreen(F2MIN, F3MAX);
my $f2f3  = $left->Canvas(-background => 'black',
                     -height => $height,
                     -width  => $width)
          ->pack(-side => 'top', -expand => 0);

my $d  = $mw->Text(-width => 15, -font => $IPA)
          ->pack(-side => 'left',-fill => 'y');

my $cur12 = $f1f2->create(oval => [0,0,0,0],-outline => 'yellow');
my $cur23 = $f2f3->create(oval => [0,0,0,0],-outline => 'yellow');

my @colours = qw(white red green blue magenta cyan orange brown pink violet);
my %colour;
my $i = 0;

read_elements();

my $ve;

foreach my $e (sort { height($a) <=> height($b) ||
                      front($a) <=> front($b) ||
                      round($a) <=> round($b) }
                     grep { $_->{features}{vwl} } values %elem)
 {
  my $ch = $e->{unicode};
  utf8::decode($ch);
  if ($e->{features}{vwl} || $e->{features}{gld})
   {
    next if ($e->{features}{nas} || $e->{features}{dip});
    my @feat = features($e);
    my $key = join(' ',@feat);
    my $colour = $colour{$key};
    unless (exists $colour{$key})
     {
      $colour = $colours[$i++ % @colours] ;
      $t->tagConfigure($colour,-foreground => $colour, -font => $IPA);
      $colour{$key} = $colour;
     }
    my $sm = $e->{sampa};
    $t->insert('end',"$sm [$ch] - @feat\n",[$colour,$e->{name}]);

    my ($x,$y) = f1f2toscreen($e->{f1}[0],$e->{f2}[0]);
    my $id12 = $f1f2->createText($x, $y,
                   -font => $IPA,
                   -fill => $colour, -text => $ch);
    ($x,$y) = f2f3toscreen($e->{f2}[0],$e->{f3}[0]);
    my $id23 = $f2f3->createText($x, $y,
                   -font => $IPA,
                   -fill => $colour, -text => $ch);
    if ($e->{sampa} eq '#')
     {
      $ve = $e;
      $f1f2->Tk::bind('<3>',[\&Click12,$ve,$id12,$id23,Ev('x'),Ev('y'),Ev('s')]);
      $f2f3->Tk::bind('<3>',[\&Click23,$ve,$id12,$id23,Ev('x'),Ev('y'),Ev('s')]);
     }
    $f1f2->bind($id12,'<1>',[\&display,$e,$id12,$id23]);
    $f1f2->bind($id12,'<2>',[\&change,$e,$id12,$id23]);
    $f2f3->bind($id23,'<1>',[\&display,$e,$id12,$id23]);
    $f2f3->bind($id23,'<2>',[\&change,$e,$id12,$id23]);
    $t->tagBind($e->{name},'<1>',[\&display,$e,$id12,$id23]);
    $t->tagBind($e->{name},'<2>',[\&change,$e,$id12,$id23]);
   }
 }

sub Click12
{
 my ($w,$e,$id12,$id23,$wx,$wy,$s) = @_;
 my $x = $w->canvasx($wx);
 my $y = $w->canvasy($wy);
 my ($f1,$f2) = f1f2fromscreen($x,$y);
 $e->{f1}[0] = $f1;
 $e->{f2}[0] = $f2;
 display($w,$e,$id12,$id23);
}

sub Click23
{
 my ($w,$e,$id12,$id23,$wx,$wy,$s) = @_;
 my $x = $w->canvasx($wx);
 my $y = $w->canvasy($wy);
 my ($f2,$f3) = f2f3fromscreen($x,$y);
 $e->{f2}[0] = $f2;
 $e->{f3}[0] = $f3;
 display($w,$e,$id12,$id23);
}

sub change
{
 my ($w,$e,$id12,$id23) = @_;
 foreach my $key (qw(f1 f2 f3))
  {
   $e->{$key}[0] = $ve->{$key}[0];
  }
 display($w,$e,$id12,$id23);
}

sub display
{
 my ($w,$e,$id12,$id23) = @_;

 my ($bx,$by) = f1f2toscreen($e->{f1}[0],$e->{f2}[0]);
 $f1f2->coords($id12,[$bx,$by]);
 my @coord = $f1f2->bbox($id12);
 $f1f2->coords($cur12,\@coord);

 ($bx,$by) = f2f3toscreen($e->{f2}[0],$e->{f3}[0]);
 $f2f3->coords($id23,[$bx,$by]);
 @coord = $f2f3->bbox($id23);
 $f2f3->coords($cur23,\@coord);

 $e->update;
 $d->delete('1.0','end');
 my $ch = $e->{unicode};
 utf8::decode($ch);
 $d->insert('end',$e->{name}.' '.$e->{sampa}." [$ch]\n");
 $d->insert('end',join(' ',features($e))."\n");
 foreach my $sym (@pNames)
  {
   $d->insert('end',sprintf("$sym:%4d\n",$e->{$sym}[0]));
  }
 # Clear audio buffer
 $au->length(0);
 # An empty element/dur "string".
 my $elm = '';
 my $pre = '.';
 my $post = '.';
 my $idx  = $e->{idx};
 foreach my $ename (@{$Rsynth::Phones::phtoelm{$pre}},$e->{name},
                @{$Rsynth::Phones::phtoelm{$post}})
  {
   my $t = $elem{$ename};
   $elm .= chr($t->{idx});
   $elm .= ($t->{idx} == $idx) ? chr(10) : chr($t->{du});
   $d->insert('end',$ename);
  }
 $synth->interpolate($elm);
 my $svr = Audio::Play->new;
 $d->insert(end => "\n");
 $svr->play($au) if $svr;
}

$f1f2->configure(-scrollregion => [$f1f2->bbox('all')]);

MainLoop;

write_elements("Elements.edt");



